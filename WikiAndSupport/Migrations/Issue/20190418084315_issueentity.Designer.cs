// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WikiAndSupport.Data;

namespace WikiAndSupport.Migrations.Issue
{
    [DbContext(typeof(IssueContext))]
    [Migration("20190418084315_issueentity")]
    partial class issueentity
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("WikiAndSupport.Models.Issues.Answer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy");

                    b.Property<long>("CreatedId");

                    b.Property<string>("CreatedName")
                        .HasMaxLength(50);

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("Email");

                    b.Property<string>("HomePage");

                    b.Property<int>("Ip");

                    b.Property<int?>("IssueId");

                    b.Property<string>("ModifiedBy");

                    b.Property<long>("ModifiedId");

                    b.Property<string>("ModifiedName")
                        .HasMaxLength(50);

                    b.Property<DateTime>("ModifiedOn")
                        .IsConcurrencyToken();

                    b.Property<string>("Name");

                    b.Property<string>("Text");

                    b.HasKey("Id");

                    b.HasIndex("IssueId");

                    b.ToTable("Answer");
                });

            modelBuilder.Entity("WikiAndSupport.Models.Issues.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AnswerId");

                    b.Property<string>("CreatedBy");

                    b.Property<long>("CreatedId");

                    b.Property<string>("CreatedName")
                        .HasMaxLength(50);

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("Email");

                    b.Property<string>("HomePage");

                    b.Property<int>("Ip");

                    b.Property<int?>("IssueId");

                    b.Property<string>("ModifiedBy");

                    b.Property<long>("ModifiedId");

                    b.Property<string>("ModifiedName")
                        .HasMaxLength(50);

                    b.Property<DateTime>("ModifiedOn")
                        .IsConcurrencyToken();

                    b.Property<string>("Name");

                    b.Property<string>("Text");

                    b.HasKey("Id");

                    b.HasIndex("AnswerId");

                    b.HasIndex("IssueId");

                    b.ToTable("Comment");
                });

            modelBuilder.Entity("WikiAndSupport.Models.Issues.Issue", b =>
                {
                    b.Property<int>("IssueId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CommitBy");

                    b.Property<DateTime>("CommitOn");

                    b.Property<string>("Content");

                    b.Property<string>("CreatedBy");

                    b.Property<long>("CreatedId");

                    b.Property<string>("CreatedName")
                        .HasMaxLength(50);

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("ModifiedBy");

                    b.Property<long>("ModifiedId");

                    b.Property<string>("ModifiedName")
                        .HasMaxLength(50);

                    b.Property<DateTime>("ModifiedOn")
                        .IsConcurrencyToken();

                    b.Property<string>("Title");

                    b.HasKey("IssueId");

                    b.ToTable("Issue");
                });

            modelBuilder.Entity("WikiAndSupport.Models.Issues.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Catalogue");

                    b.Property<string>("CreatedBy");

                    b.Property<long>("CreatedId");

                    b.Property<string>("CreatedName")
                        .HasMaxLength(50);

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("ModifiedBy");

                    b.Property<long>("ModifiedId");

                    b.Property<string>("ModifiedName")
                        .HasMaxLength(50);

                    b.Property<DateTime>("ModifiedOn")
                        .IsConcurrencyToken();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Tag");
                });

            modelBuilder.Entity("WikiAndSupport.Models.Issues.Answer", b =>
                {
                    b.HasOne("WikiAndSupport.Models.Issues.Issue", "Issue")
                        .WithMany("Answers")
                        .HasForeignKey("IssueId");
                });

            modelBuilder.Entity("WikiAndSupport.Models.Issues.Comment", b =>
                {
                    b.HasOne("WikiAndSupport.Models.Issues.Answer", "Answer")
                        .WithMany()
                        .HasForeignKey("AnswerId");

                    b.HasOne("WikiAndSupport.Models.Issues.Issue", "Issue")
                        .WithMany("Comments")
                        .HasForeignKey("IssueId");
                });
#pragma warning restore 612, 618
        }
    }
}
